{vim:ft=pascal}
unit ListOf_X_;

interface

type
	p_X_Node = ^_X_Node;

	_X_Node = record
		v: _X_;
		next, prev: p_X_Node;
	end;

	_X_List = record
		head: p_X_Node;
	end;

procedure new_list(var l: _X_List);
procedure new_node(var n: p_X_Node; v: _X_);
procedure push_front(var list: _X_List; v: _X_);
procedure destroy(var list: _X_List);
procedure remove(var list: _X_List; el: p_X_Node);
function find(var list: _X_List; var el: _X_) : p_X_Node;

implementation

procedure new_list(var l: _X_List);
begin
	l.head := nil;
end;

procedure new_node(var n: p_X_Node; v: _X_);
begin
	new(n);
	n^.v := v;
	n^.next := nil;
	n^.prev := nil;
end;

procedure push_front(var list: _X_List; v: _X_);
var
	t: p_X_Node;
begin
	new_node(t, v);
	t^.next := list.head;
	if list.head <> nil then
		list.head^.prev := t;
	list.head := t;
end;

procedure destroy(var list: _X_List);
var
	t: p_X_Node;
begin
	while list.head <> nil do begin
		t := list.head^.next;
		dispose(list.head);
		list.head := t;
	end;
end;

procedure remove(var list: _X_List; el: p_X_Node);
begin
	if el = list.head then
		list.head := el^.next;

	if el^.next <> nil then
		el^.next^.prev := el^.prev;
	if el^.prev <> nil then
		el^.prev^.next := el^.next;
	dispose(el);
end;

function find(var list: _X_List; var el: _X_) : p_X_Node;
var
	cur, extra: p_X_Node;
begin
	new(extra);
	extra^.next := list.head;
	cur := extra;
	while cur^.next <> nil do
	begin
		if cur^.next^.v = el then
		begin
			find := cur^.next;
			exit;
		end
		else
			cur := cur^.next;
	end;
	dispose(extra);
	find := nil;
end;

begin
end.
