\documentclass[a4paper,11pt, twoside]{article}
\usepackage[a4paper,left=1.5cm,top=2cm,right=1.5cm,bottom=2cm]{geometry}
\addtolength{\oddsidemargin}{0.5cm}
\addtolength{\evensidemargin}{-0.5cm}
\setlength{\parskip}{3mm}
\usepackage[utf8x]{inputenc}
\usepackage[english,polish]{babel}
\usepackage{polski}
\usepackage{amsfonts}
\usepackage[dvipsnames]{color}

\usepackage{graphicx}
\usepackage{wrapfig}
\usepackage{fancyhdr}
\usepackage{url}

\usepackage{hyperref} 
\usepackage{listings}

\makeindex  % utworzenie skorowidza (w dokumencie pdf)

\newcommand{\tl}[1]{\textbf{#1}} 

% ustawienia listingu programow
\lstset{	language=C++, 
			numbers=left, 
			numberstyle=\tiny, 
			stepnumber=1, 
			numbersep=5pt,
		  	stringstyle=\ttfamily,
			showstringspaces=false,
 			tabsize=4
		}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{document}
\thispagestyle{empty}
\vspace{2cm} %puste miejsce

\begin{center}
	\huge{{Laboratorium \em{Podstawy Programowania Komputerów}}} \\ % tu podać nazwę przedmiotu
	\normalsize
	\vspace{1cm}
	\small
	\begin{tabular}{c|c|c|c|c|c|c|c|c|}
		rok akademicki & studia & kierunek & semestr &  termin & tydzień & grupa & sekcja \\
		\hline
		2009/2010				&	% rok akademicki
		dzienne					&	% rodzaj studiów
		INF						&	% kierunek
		1 						&	% semestr
		wtorek,						% dzień tygodnia
		12:00 -- 13:30			&	% godzina ćwiczeń
		parzysty i~nieparzysty	&	% tydzień
		1						&	% grupa
		2							% sekcja
		\\
		\hline
	\end{tabular}
	\normalsize
	\vfill
	\Huge{{Sprawozdanie z programu nr 2}}  % podać numer ćwiczenia
	\vfill
	\normalsize
	temat ćwiczenia: \\
	\vspace{.75cm}
	\huge{{Gra ASCIIBattle}}
	\normalsize
\end{center}
\vfill \vfill

\normalsize
\hbox{\vbox
	{\hsize 7.5cm
		\begin{tabular} {r|c|}
			{data ćwiczenia:} & 2006/12/07 	\\ \hline
		   	{termin sprawozdania:} & 2006/12/14 \\ \hline
			{data sprawozdania:} & \\ \hline
			{ocena:} & \\ \hline
		\end{tabular}
	}
	\kern 0.5cm
	\vbox
	{\hsize 8cm
		\begin{tabular} {ll|}
			\tl{prowadzący:} & dr inż. Tomasz Wojdyła \\ \hline
			\tl{autor:} & Michał Trybus \\ \hline
		\end{tabular}
	}
}
\normalsize

%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newpage				% nowa strona
\newpage
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Treść zadania}
Napisać grę komputerową w~trybie tekstowym polegającą na wzajemnym ostrzeliwaniu przez dwóch graczy swoich fortów stworzonych wcześniej w~edytorze tekstowym.

\subsection{Założenia projektowe}
Zostały przyjęte następujące założenia bazowe:

\begin{itemize}
	\item{działanie w~całości w~trybie tekstowym, w~szczególności wsparcie przynajmniej vt100, DOS-a i~konsoli Windows,}
	\item{brak zależności od jakichkolwiek bibliotek zewnętrznych, kompilacja pod fpc,}
	\item{oparcie o~wzorzec MVC, pełne rozdzielenie logiki aplikacji od interfejsu, zapewniające możliwość łatwej rozbudowy o~wersję sieciową,}
	\item{kod nieobiektowy.}
\end{itemize}

Założenia zostały prawie spełnione, warto jednak zauważyć, że w~celu uzyskania generyczności kodu odpowiedzialnego za obsługę list, konieczna była generacja pewnego fragmentu kodu przy pomocy skryptu sed'a.

Dodatkowe założenia dotyczące działania programu i~funkcji:

\begin{itemize}
	\item{obsługa plików konfiguracyjnych służących do definiowania warunków gry,}
	\item{dwa forty graczy oraz wspólna plansza - wszystko może być zniszczone przez rakiety,}
	\item{animacje eksplozji,}
	\item{rozgrywka turowa,}
	\item{różne siły wybuchu broni,}
	\item{wpływ wiatru na symulację fizyki.}
\end{itemize}

\section{Analiza zadania i propozycja rozwiązania}
Gra ASCIIBattle składa się z symulatora fizyki, którego składowe stanową główny model wzorca MVC, interfejsu użytkownika korzystającego z biblioteki Crt, będącego widokiem, oraz kontrolera rozgrywki połączonego z kodem głównego programu. Nie jest zachowana pełna zgodność ze wzorcem.

\subsection{Symulator fizyki}
Symulator fizyki dokonuje symulacji ruchu rakiet oraz eksplozji pola gry bazując na następujących założeniach:

\begin{itemize}
	\item{przestrzeń gry jest ciągła, 2-wymiarowa i opisana jednostkami układu SI,}
	\item{przestrzeń gry jest podzielona na pola reprezentowane na ekranie przez pojedyncze znaki ASCII,}
	\item{rozmiar pojedynczego pola może być dowolnie ustawiony wewnątrz kodu gry. W celu zapewnienia grywalności i proporcji został on ustawiony metodą prób i błędów na 0.2 x 0.39m,}
	\item{pola gry są niemobilne, mogą jedynie się palić, ale nie przemieszczać,}
	\item{każde pole posiada informację o jego ,,stanie zdrowia'' w postaci liczbowej (hp),}
	\item{palenie się pola polega na stopniowym zmniejszaniu jego hp,}
	\item{rakiety to jedyne obiekty mobilne,}
	\item{rakiety nie mają odzwierciedlenia na planszy, nie są reprezentowane przez pola, ale znajdują się na liście, która jest sekwencyjnie przeglądana w celu odświeżenia stanu rakiet,}
	\item{rakieta posiada parametry: promień wybuchu oraz siłę wybuchu.}
\end{itemize}

Wystrzelenie rakiety odbywa się przez dodanie jej do listy rakiet i ustawienie prędkości początkowej oraz przyspieszenia odpowiadającego grawitacji. Ruch jest symulowany przy wykorzystaniu zasad dynamiki Newtona.

Gdy nastąpi kolizja rakiety z polem gry, tylko pola, które są nie dalej od punktu wybuchu niż długość promienia wybuchu, doznają obrażeń. Siła obrażenia (ilość traconych punktów życia) jest odwrotnie proporcjonalna do kwadratu odległości od punktu wybuchu. Pola o hp = 0 traktowane są jak powietrze.

\subsection{Interfejs użytkownika}
Interfejs użytkownika ma za zadanie wyświetlać obecny stan gry w postaci reprezentacji planszy za pomocą znaków na ekranie oraz dwóch paneli na górze i dole ekranu, informujących o tym, kto gra, ile ma rakiet, itp. Oprócz tego interfejs odczytuje naciśnięte przez użytkownika klawisze. Klawisze dotyczące obsługi interfejsu (np.~przewijanie ekranu) są obsługiwane wewnętrznie, natomiast naciśnięcia innych klawiszy skutkują ustawieniem odpowiednich flag w strukturze stanu interfejsu, które może odczytać program główny i odpowiednio zareagować.

W celu optymalizacji ilości operacji wejścia/wyjścia w każdym kroku animacji odświeżane są tylko pola planszy, których stan uległ zmianie od ostatniego kroku. Do tego celu wykorzystywana jest lista obiektów animowanych, modyfikowana na bieżąco przez symulator fizyki.

\subsection{Kontroler rozgrywki}
Kontroler rozgrywki zaimplementowany jest jako moduł Game oraz program główny. Moduł Game odpowiada za translacje poleceń strzału zawodnika na polecenia zrozumiałe dla symulatora fizyki (tzn.~ustawienie rakiety w danym punkcie oraz jej prędkości początkowej) oraz kontrolowanie logiki gry: sprawdzanie wygranej, stanu życia graczy, zmiana siły wiatru. Główny program ma za zadanie odczytać informacje z plików konfiguracyjnych, zainicjalizować struktury danych i kontrolować rozgrywkę przez naprzemienne wystrzeliwanie z dział przeciwników.

\section{Specyfikacja zewnętrzna}
Tu proszę napisać, jak należy się posługiwać programem (pewnego rodzaju instrukcja obsługi). 

Nieraz specyfikacja zewnętrzna może być pominięta, np. gdy zadaniem jest optymalizacja programu, bez zmiany jego funkcjonalności, wtedy można tylko ogólnie napisać, jak się uruchamia program, jak dostarcza dane i jak odbiera wyniki.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Specyfikacja wewnętrzna}
Tu proszę wpisać, jak Państwo zrealizowali swoje rozwiązanie. Jest to dokumentacja techniczna dla programistów.

Dołączanie kodu do programu powinno być rozważne. Jeżeli prowadzący nie poleci inaczej, należy cytować tylko interesujące fragmenty kodu, a nie cały kod.
Kod powinien być podany czcionką nieproporcjonalną (np. w~środowisku {\tt verbatim}):
\begin{verbatim}
int main ()
{
   int i;   // prosze nie zapominac o komentarzach!
   for (i = 0; i < 10; i++)
	  cout << i << endl;   
   return 0;
}
\end{verbatim}

Bądź z~wykorzystaniem środowiska formatującego kod (jak {\tt listings}) 
\begin{lstlisting}
int main ()
{
	int i;		// prosze nie zapominac o komentarzach!
	for (i = 0; i < 10; i++)
		cout << i << endl;
	return 0;
}
\end{lstlisting}

Proszę pamiętać o formatowaniu kodu (wcięcia, spacje)!
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Uzyskane wyniki}
Wyniki można przestawić w~różny sposób, np. w tabeli ({\it vide} tabela \ref{tab:1}), czy na~rysunku ({\it vide} rycina ). Albo po prostu opisać uzyskane wyniki.

\begin{table*}
\caption{Czas wykonania programu i~zajętość pamięci}
\begin{small}
\begin{center}
\begin{tabular}{|c||c|c|}
  \hline
  liczba danych & czas wykonania [s] & zajętość pamięci [MB] \\
  \hline
  10  & 0,0012 & 0,43 \\
  20  & 0,0056 & 0,98 \\
  50  & 1,3432 & 12,4 \\
  100 & 453,40 & 165  \\
  200 & 7843,9 & 543  \\
  \hline
\end{tabular}  \label{tab:1}
\end{center}
\end{small}
\end{table*}


\section{Wnioski}
Proszę napisać, czy zrealizowali Państwo zadanie. Jeśli nie, to dlaczego się to nie powiodło. Warto napisać, czego się Państwo nauczyli podczas tworzenia programu, czy laboratorium wniosło coś konstruktywnego..., można dodać uwagi dotyczące przedmiotu, sposobu prowadzenia, sugerowane zmiany, czego Państwo się spodziewali po ćwiczeniach, a nie zostało to spełnione. 

\end{document}
% Koniec wieńczy dzieło.
