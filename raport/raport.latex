\documentclass[a4paper,11pt, twoside]{article}
\usepackage[a4paper,left=1.5cm,top=2cm,right=1.5cm,bottom=2cm]{geometry}
\addtolength{\oddsidemargin}{0.5cm}
\addtolength{\evensidemargin}{-0.5cm}
\setlength{\parskip}{3mm}
\usepackage[utf8x]{inputenc}
\usepackage[english,polish]{babel}
\usepackage{polski}
\usepackage{amsfonts}
\usepackage[dvipsnames]{color}

\usepackage{graphicx}
\usepackage{wrapfig}
\usepackage{fancyhdr}
\usepackage{url}

\usepackage{hyperref} 
\usepackage{listings}

\makeindex  % utworzenie skorowidza (w dokumencie pdf)

\newcommand{\tl}[1]{\textbf{#1}} 

% ustawienia listingu programow
\lstset{	language=C++, 
			numbers=left, 
			numberstyle=\tiny, 
			stepnumber=1, 
			numbersep=5pt,
		  	stringstyle=\ttfamily,
			showstringspaces=false,
 			tabsize=4
		}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{document}
\thispagestyle{empty}
\vspace{2cm} %puste miejsce

\begin{center}
	\huge{{Laboratorium \em{Podstawy Programowania Komputerów}}} \\ % tu podać nazwę przedmiotu
	\normalsize
	\vspace{1cm}
	\small
	\begin{tabular}{c|c|c|c|c|c|c|c|c|}
		rok akademicki & studia & kierunek & semestr &  termin & tydzień & grupa & sekcja \\
		\hline
		2009/2010				&	% rok akademicki
		dzienne					&	% rodzaj studiów
		INF						&	% kierunek
		1 						&	% semestr
		wtorek,						% dzień tygodnia
		12:00 -- 13:30			&	% godzina ćwiczeń
		parzysty i~nieparzysty	&	% tydzień
		1						&	% grupa
		2							% sekcja
		\\
		\hline
	\end{tabular}
	\normalsize
	\vfill
	\Huge{{Sprawozdanie z programu nr 2}}  % podać numer ćwiczenia
	\vfill
	\normalsize
	temat ćwiczenia: \\
	\vspace{.75cm}
	\huge{{Gra ASCIIBattle}}
	\normalsize
\end{center}
\vfill \vfill

\normalsize
\hbox{\vbox
	{\hsize 7.5cm
		\begin{tabular} {r|c|}
			{data ćwiczenia:} & 2010/01/25 	\\ \hline
		   	{termin sprawozdania:} & 2010/01/25 \\ \hline
			{data sprawozdania:} & 2010/01/25 \\ \hline
			{ocena:} & \\ \hline
		\end{tabular}
	}
	\kern 0.5cm
	\vbox
	{\hsize 8cm
		\begin{tabular} {ll|}
			\tl{prowadzący:} & Tomasz Wojdyła \\ \hline
			\tl{autor:} & Michał Trybus \\ \hline
		\end{tabular}
	}
}
\normalsize

%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newpage				% nowa strona
\newpage
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Treść zadania}
Napisać grę komputerową w~trybie tekstowym polegającą na wzajemnym ostrzeliwaniu przez dwóch graczy swoich fortów stworzonych wcześniej w~edytorze tekstowym.

\subsection{Założenia projektowe}
Zostały przyjęte następujące założenia bazowe:

\begin{itemize}
	\item{działanie w~całości w~trybie tekstowym, w~szczególności wsparcie przynajmniej vt100, DOS-a i~konsoli Windows,}
	\item{brak zależności od jakichkolwiek bibliotek zewnętrznych, kompilacja pod fpc,}
	\item{oparcie o~wzorzec MVC, pełne rozdzielenie logiki aplikacji od interfejsu, zapewniające możliwość łatwej rozbudowy o~wersję sieciową,}
	\item{kod nieobiektowy.}
\end{itemize}

Założenia zostały prawie spełnione, warto jednak zauważyć, że w~celu uzyskania generyczności kodu odpowiedzialnego za obsługę list, konieczna była generacja pewnego fragmentu kodu przy pomocy skryptu sed'a.

Dodatkowe założenia dotyczące działania programu i~funkcji:

\begin{itemize}
	\item{obsługa plików konfiguracyjnych służących do definiowania warunków gry,}
	\item{dwa forty graczy oraz wspólna plansza - wszystko może być zniszczone przez rakiety,}
	\item{animacje eksplozji,}
	\item{rozgrywka turowa,}
	\item{różne siły wybuchu broni,}
	\item{wpływ wiatru na symulację fizyki.}
\end{itemize}

\section{Analiza zadania i propozycja rozwiązania}
Gra ASCIIBattle składa się z symulatora fizyki, którego składowe stanową główny model wzorca MVC, interfejsu użytkownika korzystającego z biblioteki Crt, będącego widokiem, oraz kontrolera rozgrywki połączonego z kodem głównego programu. Nie jest zachowana pełna zgodność ze wzorcem.

\subsection{Symulator fizyki}
Symulator fizyki dokonuje symulacji ruchu rakiet oraz eksplozji pola gry bazując na następujących założeniach:

\begin{itemize}
	\item{przestrzeń gry jest ciągła, 2-wymiarowa i opisana jednostkami układu SI,}
	\item{przestrzeń gry jest podzielona na pola reprezentowane na ekranie przez pojedyncze znaki ASCII,}
	\item{rozmiar pojedynczego pola może być dowolnie ustawiony wewnątrz kodu gry. W celu zapewnienia grywalności i proporcji został on ustawiony metodą prób i błędów na 0.2 x 0.39m,}
	\item{pola gry są niemobilne, mogą jedynie się palić, ale nie przemieszczać,}
	\item{każde pole posiada informację o jego ,,stanie zdrowia'' w postaci liczbowej (hp),}
	\item{palenie się pola polega na stopniowym zmniejszaniu jego hp,}
	\item{rakiety to jedyne obiekty mobilne,}
	\item{rakiety nie mają odzwierciedlenia na planszy, nie są reprezentowane przez pola, ale znajdują się na liście, która jest sekwencyjnie przeglądana w celu odświeżenia stanu rakiet,}
	\item{rakieta posiada parametry: promień wybuchu oraz siłę wybuchu.}
\end{itemize}

Wystrzelenie rakiety odbywa się przez dodanie jej do listy rakiet i ustawienie prędkości początkowej oraz przyspieszenia odpowiadającego grawitacji. Ruch jest symulowany przy wykorzystaniu zasad dynamiki Newtona.

Gdy nastąpi kolizja rakiety z polem gry, tylko pola, które są nie dalej od punktu wybuchu niż długość promienia wybuchu, doznają obrażeń. Siła obrażenia (ilość traconych punktów życia) jest odwrotnie proporcjonalna do kwadratu odległości od punktu wybuchu. Pola o hp = 0 traktowane są jak powietrze.

\subsection{Interfejs użytkownika}
Interfejs użytkownika ma za zadanie wyświetlać obecny stan gry w postaci reprezentacji planszy za pomocą znaków na ekranie oraz dwóch paneli na górze i dole ekranu, informujących o tym, kto gra, ile ma rakiet, itp. Oprócz tego interfejs odczytuje naciśnięte przez użytkownika klawisze. Klawisze dotyczące obsługi interfejsu (np.~przewijanie ekranu) są obsługiwane wewnętrznie, natomiast naciśnięcia innych klawiszy skutkują ustawieniem odpowiednich flag w strukturze stanu interfejsu, które może odczytać program główny i odpowiednio zareagować.

W celu optymalizacji ilości operacji wejścia/wyjścia w każdym kroku animacji odświeżane są tylko pola planszy, których stan uległ zmianie od ostatniego kroku. Do tego celu wykorzystywana jest lista obiektów animowanych, modyfikowana na bieżąco przez symulator fizyki.

\subsection{Kontroler rozgrywki}
Kontroler rozgrywki zaimplementowany jest jako moduł Game oraz program główny. Moduł Game odpowiada za translacje poleceń strzału zawodnika na polecenia zrozumiałe dla symulatora fizyki (tzn.~ustawienie rakiety w danym punkcie oraz jej prędkości początkowej) oraz kontrolowanie logiki gry: sprawdzanie wygranej, stanu życia graczy, zmiana siły wiatru. Główny program ma za zadanie odczytać informacje z plików konfiguracyjnych, zainicjalizować struktury danych i kontrolować rozgrywkę przez naprzemienne wystrzeliwanie z dział przeciwników.

\section{Specyfikacja zewnętrzna}
Jako pierwszy i~jedyny parametr użytkownik podaje nazwę pliku rozgrywki.
W~trakcie gry gracze naprzemiennie strzelają ze swoich baz różnymi pociskami. Klawisze od 1 do 9 służą do wyboru między zdefiniowanymi w~pliku rozgrywki rakietami. Za pomocą klawiszy W, A, S, D można przesuwać widok planszy.
Do ustawiania parametrów wystrzału służą strzałki. Siłę wystrzału regulują strzałka lewa oraz strzałka prawa, a~kąt - strzałka górna i~strzałka dolna. Za pomocą spacji użytkownik wystrzeliwuje pocisk.
Celem gry jest zabicie króla przeciwnika.

W~katalogu konfiguracyjnym powinny znajdować się 3 podkatalogi: games, maps oraz forts. W~katalogu games przechowywane są pliki rozgrywki, w~katalogu maps znajdują się plansze, a~katalog forts zawiera forty wykorzystywane w~czasie gry.

\subsection{Interfejs użytkownika}
\includegraphics[width=18cm]{iface.eps}

Na górnym panelu znajdują się w~narożnikach nazwy graczy wraz z~ich pozostałym życiem, a~w~środku widnieje wskaźnik wiatru. Nazwa gracza jest ujęta między czerwone nawiasy kątowe, jeśli jest aktualnie jego tura.
Na dolnym panelu z~lewej strony znajduje się wskaźnik aktualnie ustawionej siły wystrzału, natomiast po prawej stronie jest wskaźnik broni. Pomiędzy nawiasami kwadratowymi napisany jest numer aktualnie wybranej broni, następnie jej nazwa. Po literze r znajduje się promień wybuchu, następnie po literze f: fiła rażenia i~w~końcu w~nawiasach okrągłych ilość pozostałych pocisków danej broni.

\subsection{Plik rozgrywki}
Plik rozgrywki jest oparty o~zbiór elementów typu klucz=wartość, po jednym w~każdej linii. Obowiązkowe klucze ogólnej konfiguracji to:
\begin{itemize}
	\item{map\_file - określa nazwę używanej mapy (plik o~takiej nazwie zostanie odczytany z~podkatalogu maps),}
	\item{playerX\_fort\_file - określa nazwę fortu używanego przez gracza X,}
	\item{playerX\_fort\_pos - określa pozycję fortu gracza X względem początku układu współrzędnych mapy.}
\end{itemize}
Nieobowiązkowe wpisy konfiguracyjne:
\begin{itemize}
	\item{fort\_modifier - określa modyfikator twardości fortu względem reszty mapy. Im większa wartość tym mniej zniszczalny fort,}
	\item{max\_force - maksymalna ,,siła'' z~jaką gracz może oddać strzał określona jako prędkość początkowa w~$\frac{m}{s}$,}
	\item{max\_wind - maksymalna ,,siła'' wiatru określona jako pozioma składowa przyspieszenia rakiet w~$\frac{m}{s^2}$,}
	\item{playerX\_name i~playerX\_color - określają nazwę i~kolor gracza X, kolor określa się liczbą od 0 do 15 (jak w~bibliotece Crt).}
\end{itemize}
W~grze można zdefiniować maksymalnie 9 broni. Broń o~danym numerze (od 1 do 9) jest dostępna pod takim właśnie klawiszem. Klucze wszystkich wpisów dotyczące broni rozpoczynają się słowem weaponX\_, gdzie X oznacza numer broni. Dostępne są następujące parametry każdej broni (z~pominięciem przedrostka weaponX\_):
\begin{itemize}
	\item{name - nazwa dobrze opisująca typ broni i~nie za długa,}
	\item{force - siła wybuchu broni wyrażona w~jednostkach siły wybuchu broni, ujemna wartość oznacza, że rakieta będzie pociskiem budującym,}
	\item{radius - promień wybuchu broni wyrażony w~metrach,}
	\item{amount - ilość rakiet danego typu, które mają być jednocześnie wystrzelone w~ramach jednego strzału,}
	\item{limit - ilość amunicji dostępna dla pojedynczego gracza}
	\item{drill - odległość na jaką rakieta ma się wwiercić w~teren zanim wybuchnie wyrażona w~metrach.}
\end{itemize}

\subsection{Plik planszy}
W~pierwszej linii pliku planszy znajdują się szerokość i~wysokość planszy oddzielone pojedynczym odstępem. W~następnych liniach są kolejne poziome fragmenty planszy. Jednemu polu odpowiada jedna cyfra w~pliku. 0 oznacza pole puste, a~cyfry od 1 do 9 oznaczają różne twardości.

\subsection{Plik fortu}
Plik fortu ma podobny format do pliku planszy z~trzema różnicami: znak ,,.'' służy do zaznaczenia, że dane pole powinno być przezroczyste, gdyż 0 zamazałoby kawałek terenu pod fortem, znak ,,K'' oznacza pozycję króla, a~,,C'' - pozycję działa.

\section{Specyfikacja wewnętrzna}
Program jest dosyć dobrze udokumentowany wewnątrz kodu. Prawie przed każdą funkcją i~procedurą jest krótki opis tego co robi, więc opisywanie funkcji nie jest konieczne.

Ogólna zasada działania opiera się na odczytaniu plików konfiguracyjnych, odpowiednim zainicjalizowaniu zmiennych, a~następnie na sekwencyjnym wywoływaniu procedury gc\_step z~modułu GameController w~celu odświerzenia symulacji gry, oraz iface\_step z~modułu CrtInterface w~celu odświeżenia ekranu i~odebrania zdarzeń od użytkownika. Od czasu do czasu (gdy użytkownik strzela) zmieniany jest aktualny gracz procedurą iface\_change\_player.

\section{Uzyskane wyniki}
W~wyniku wykonania projektu powstała gra ASCIIBattle

\section{Wnioski}
Zadanie zostało zrealizowane. Program działa poprawnie.

\end{document}
